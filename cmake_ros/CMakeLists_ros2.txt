cmake_minimum_required(VERSION 3.8)
project(hyvio)

set(CMAKE_BUILD_TYPE "Release")
set(CMAKE_CXX_STANDARD 14)

add_definitions(-DROS2)
# Modify cmake module path if new .cmake files are required
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}/cmake_ros")

find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED) 
find_package(tf2 REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(sensor_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(tf2_eigen REQUIRED)
find_package(image_transport REQUIRED)
find_package(cv_bridge REQUIRED)
find_package(message_filters REQUIRED)
find_package(pcl_conversions REQUIRED)
find_package(pcl_ros REQUIRED)
find_package(std_srvs REQUIRED)

## System dependencies are found with CMake's conventions
find_package(Boost REQUIRED)
find_package(OpenCV REQUIRED)
find_package(SuiteSparse REQUIRED)
find_package(Ceres REQUIRED)
find_package(Eigen3 REQUIRED)
find_package(tf2_ros REQUIRED)
###########
## Build ##
###########

include_directories(
    include
    ${EIGEN3_INCLUDE_DIR}
    ${Boost_INCLUDE_DIR}
    ${OpenCV_INCLUDE_DIRS}
    ${SUITESPARSE_INCLUDE_DIRS}
    ${CERES_INCLUDE_DIRS}
)

# Image processor
add_library(image_processor
    src/image_processor.cpp
    src/ORBDescriptor.cpp
)
target_link_libraries(image_processor glog
    ${OpenCV_LIBRARIES}
)

# Initializer
# -- Static Initializer
add_library(staticInitializer
    src/StaticInitializer.cpp
)
target_link_libraries(staticInitializer glog
    ${SUITESPARSE_LIBRARIES}
)
# -- Dynamic Initializer
add_library(dynamicInitializer
    src/StaticInitializer.cpp
    src/DynamicInitializer.cpp
    src/feature_manager.cpp
    src/initial_alignment.cpp
    src/initial_sfm.cpp
    src/solve_5pts.cpp
)
target_link_libraries(dynamicInitializer glog
    ${SUITESPARSE_LIBRARIES}
    ${CERES_LIBRARIES}
    ${OpenCV_LIBRARIES}
)
# -- Flexible Initializer
add_library(flexibleInitializer
    src/FlexibleInitializer.cpp
)
target_link_libraries(flexibleInitializer glog
    staticInitializer
    dynamicInitializer
)

# Estimator
add_library(estimator
    src/hyvio.cpp
)
target_link_libraries(estimator glog
    flexibleInitializer
    ${SUITESPARSE_LIBRARIES}
    ${OpenCV_LIBRARIES}
)

# System Manager
add_library(system_manager
    src/System.cpp
    src/hyvio.cpp
    src/image_processor.cpp
    src/feature_manager.cpp
)
ament_target_dependencies(system_manager
    rclcpp
    std_msgs
    tf2
    tf2_ros
    nav_msgs
    sensor_msgs
    geometry_msgs
    Eigen3
    tf2_eigen
    tf2_ros
    image_transport
    cv_bridge
    message_filters
    pcl_conversions
    pcl_ros
    std_srvs
)
target_link_libraries(system_manager glog
    image_processor 
    estimator
)

# Add executable target
add_executable(hyvio_node
    src/main.cpp
)
ament_target_dependencies(hyvio_node
    rclcpp
)
target_link_libraries(hyvio_node
    system_manager
    glog
)

#############
## Install ##
#############

install(TARGETS
    image_processor 
    estimator 
    system_manager
    hyvio_node
    ARCHIVE DESTINATION lib
    LIBRARY DESTINATION lib
    RUNTIME DESTINATION lib/${PROJECT_NAME}
)

install(DIRECTORY include/${PROJECT_NAME}/
    DESTINATION include/${PROJECT_NAME}
)

install(DIRECTORY launch config rviz
    DESTINATION share/${PROJECT_NAME}
)

ament_package()
